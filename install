#!/bin/bash

set -e

homebrew_packages="$(cat brew_pkgs | xargs)"
apt_packages="$(cat apt_pkgs | xargs)"
os="$(uname -s | tr -d '\n')"

is_installed () {
  # This works with scripts and programs. For more info, check
  # http://goo.gl/B9683D
  type $1 &> /dev/null 2>&1
}

is_brew_installed () {
  brew --prefix "$1" &> /dev/null
}

installed=""
is_apt_installed() {
  [[ -z $installed ]] && installed="$(apt list --installed)"
  echo $installed | grep -q "$1"
}

install_homebrew () {
  if ! is_installed brew; then
    step "Installing Homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

install_homebrew_packages () {
  step "Installing missing packages: $homebrew_packages"
  for package in $homebrew_packages; do
    if ! is_brew_installed $package; then
      echo "Installing $package"
      brew install $package
    fi
  done
}

install_apt_packages () {
  step "Installing missing packages: $apt_packages"
  for package in $apt_packages; do
    if ! is_apt_installed $package; then
      echo "Installing $package"
      sudo apt-get install -y $package
    fi
  done
}

install_nvim_dependencies() {
  if ! ls -A "$HOME/.config/nvim/plugged" &> /dev/null; then
    step "Installing nvim dependencies"

    sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    nvim --headless +PlugInstall +qall
    nvim --headless +TSUpdateSync +qa
  fi
}

step() {
  cat <<-EOF 1>&2
	==============================
	$1
	------------------------------
	EOF
}

install_pure_prompt () {
  if ! ls -A "$HOME/.zsh/pure" &> /dev/null; then
    step "Installing pure"
    mkdir -p "$HOME/.zsh"
    git clone https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"
  fi
}

install_npm_packages () {
    # Check for npm
    if is_installed npm; then
        printf "Installing Node.js packages..."

        # List of npm packages
        local packages="typescript typescript-language-server prettier vscode-langservers-extracted"

        # Install packages globally and quietly
        if [[ $SPIN ]]; then
          yarn global add $packages --silent
        else
          npm install $packages --global --quiet
        fi

        [[ $? ]] && printf "Done"
    else
        printf "\n"
        printf "Error: npm not found."
        printf "Aborting...\n"
        exit
    fi
}

install_neovim () {
  sudo apt purge -y neovim
  curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
  chmod u+x nvim.appimage
  ./nvim.appimage --appimage-extract
  ./squashfs-root/AppRun --version

  sudo mv squashfs-root /
  sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
}

main () {
  local dot_files="${@:-.*}"
  local current_dir
  current_dir="$(pwd)"

  if [[ $# -eq 0 ]]; then
    if [[ $os = "Darwin" ]]; then
      install_homebrew
      install_homebrew_packages
    fi

    if [[ $SPIN ]]; then
      # install_neovim
      # install_apt_packages
      rm -f $HOME/.zshrc
      rm -f $HOME/.gitconfig

      if [ -f /etc/spin/secrets/github-copilot ]; then
        mkdir -p "${HOME}/.config/github-copilot"
        cp /etc/spin/secrets/github-copilot "${HOME}/.config/github-copilot/hosts.json"
      fi
    fi
  fi
}

main "$@"

CONFIG="install.conf.yaml"
DOTBOT_DIR="dotbot"

DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

cd "${BASEDIR}"
git submodule update --init --recursive "${DOTBOT_DIR}"

"${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" $@

install_pure_prompt
install_npm_packages
install_nvim_dependencies

if ls -A "$HOME/.local/share/nvim/plugged/telescope-fzf-native.nvim" &> /dev/null; then
  make -C "$HOME/.local/share/nvim/plugged/telescope-fzf-native.nvim"
fi
